services:
  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}

    # 포트 매핑: "호스트포트:컨테이너포트"
    ports:
      - "3306:3306"

    # 데이터 영구 저장을 위한 볼륨 마운트 (MySQL 데이터 디렉토리를 볼륨에 저장)
    volumes:
      - mysql_data:/var/lib/mysql

    # 컨테이너 시작시 실행할 명령어 (MySQL 설정)
    command:
      - --default-authentication-plugin=mysql_native_password # 인증 방식
      - --character-set-server=utf8mb4 # 문자셋 (한글 지원)
      - --collation-server=utf8mb4_unicode_ci # 정렬 규칙

    # 컨테이너 상태 확인
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${DB_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 30s

    # 컨테이너 자동 재시작
    restart: unless-stopped

  # Redis
  redis:
    # 경량화된 Alpine Linux 기반 Redis
    image: redis:alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 2
    restart: unless-stopped

  # Spring Boot
  app:
    # 현재 디렉토리의 Dockerfile로 이미지 빌드
    build: .
    container_name: spring-app

    # 의존성 설정: 다른 서비스가 준비된 후 시작
    depends_on:
      mysql:
        condition: service_healthy # MySQL이 healthy 상태일 때만 시작
      redis:
        condition: service_healthy # Redis가 healthy 상태일 때만 시작

    # Spring Boot 환경변수
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=mysql
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - GOOGLE_BOOKS_API_KEY=${GOOGLE_BOOKS_API_KEY}
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata/  # OCR 데이터 경로
      - LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib       # 라이브러리 경로

    # 내부 네트워크에서만 접근 가능한 포트
    expose:
      - "8080" # ports와 달리 외부에서 직접 접근 불가

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy

    depends_on:
      - app

    ports:
      - "80:80" # HTTP
      - "443:443" #HTTPS

    # 설정 파일과 SSL 인증서 마운트
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro          # Nginx 설정 파일 (읽기 전용)
      - /etc/letsencrypt:/etc/letsencrypt:ro         # SSL 인증서 (읽기 전용)

volumes:
  mysql_data:
  redis_data: